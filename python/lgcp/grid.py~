#!/usr/bin/python
# -*- coding: UTF-8 -*-
"""
``grid.py``: Functions related to point binning
"""
"""
import itertools
import numpy as np
import numpy.random
from lgcp.util import *
from numpy import *

def findpeaks(q,height_thr=-inf,rclear=1):
    '''
    Find local maxima in a radius ``r`` neighborhood
    higher than ``height_thr``.
    
    Parameters
    ----------
    q: np.float32
        2D array of potential values.
        
    Other Parameters
    ----------------
    height_thr: float
        Exclude peaks shorter than this.
    rclear: int
        Radius of neighborhood for local maxima.
        
    Returns
    -------
    :np.bool
        2D boolean mask of pixels that are local maxima.
    '''
    H,W = q.shape[:2]
    rclear = max(1.0,rclear)
    # Add padding
    rpad = max(1,int(np.ceil(rclear)))
    Wpad = W+2*rpad
    Hpad = H+2*rpad
    qpad = zeros((Hpad,Wpad)+q.shape[2:],dtype=q.dtype)
    qpad[rpad:-rpad,rpad:-rpad,...] = q[:,:,...]
    # Only points above the threshold are candidate peaks
    p = q>height_thr
    # Mask away points that have a taller neighbor
    Δ = range(-rpad,rpad+1)
    limit = rclear**2
    for i in Δ:
        for j in Δ:
            if i==j==0 or (i*i+j*j)>limit:continue
            p &= q>qpad[i+rpad:H+i+rpad,j+rpad:W+j+rpad,...]
    return p


def interpolate_peaks(
    z,
    rclear=1,
    height_thr=None,
    return_heights=False,
    dither=1e-15):
    '''
    Interpolated peak locations.
    
    Parameters
    ----------
    z: np.ndarray
        ``H×W×NSAMPLES`` array of sampled 2D grid-fields.
    rclear: int; default 1
        Radius (bins) for local maxima to count as peaks.
    height_thr: float, optional
        Minimum peak height; defaults to the 25th %ile.
    return_heights: boolean; default False
        Return peak heights?
    
    Returns
    -------
    peaks: tuple
        ``(ix,iy)`` peak coordinates (if ``q`` is 2D), 
        or ``(ix,iy,iz)`` if ``q`` is 3D (``iz`` is the 
        sample number each peak belongs to).
    heights: list
        Peak heights, if ``return_heights=True``.
    '''
    z  = np.array(z)
    dither = dither*np.max(abs(z))
    z += np.random.randn(*z.shape)*dither
    
    H,W  = z.shape[:2]
    is3d = len(z.shape)==3
    if not is3d: z = z.reshape(H,W,1)
    if height_thr is None: 
        height_thr=nanpercentile(z,25)
    height_thr = max(height_thr, np.min(z)+6*dither)

    peaks    = findpeaks(z,height_thr,rclear)
    ry,rx,rz = where(peaks)
    heights  = z[peaks]
    
    # Use quadratic interpolation to localize peaks
    rx0 = np.clip(rx-1,0,W-1)
    rx2 = np.clip(rx+1,0,W-1)
    ry0 = np.clip(ry-1,0,H-1)
    ry2 = np.clip(ry+1,0,H-1)
    s00 = z[ry0,rx0,rz]
    s01 = z[ry0,rx ,rz]
    s02 = z[ry0,rx2,rz]
    s10 = z[ry ,rx0,rz]
    s11 = z[ry ,rx ,rz]
    s12 = z[ry ,rx2,rz]
    s20 = z[ry2,rx0,rz]
    s21 = z[ry2,rx ,rz]
    s22 = z[ry2,rx2,rz]
    dy  = (s21 - s01)/2
    dx  = (s12 - s10)/2
    dyy = s21+s01-2*s11
    dxx = s12+s10-2*s11
    dxy = (s22+s00-s20-s02)/4
    det = 1/(dxx*dyy-dxy*dxy)
    ix  = (rx-( dx*dyy-dy*dxy)*det + 0.5)/W
    iy  = (ry-(-dx*dxy+dy*dxx)*det + 0.5)/H

    bad = (ix<0) | (ix>1-1/W) | (iy<0) | (iy>1-1/H)
    peaks = float32((iy,ix,rz) if is3d else (iy,ix))
    order = argsort(-heights[~bad])
    
    peaks = peaks[:,~bad][:,order]
    heights = heights[~bad][order]
    return (peaks, heights) if return_heights else peaks
    

def zgrid(W,H=None,):
    '''
    2D grid coordinates as x+iy complex numbers.
    Each dimension ranges from -L//2 to (L-1-L//2).
    
    Parameters
    ----------
    W: positive integer
        The width of the grid, in bins.
    
    Other Parameters
    ----------
    H: positive integer or ``None``
        Optional; If omitted, defaults to ``H=W``.
    '''
    if H is None: H=W
    cw = arange(W)-W//2
    ch = arange(H)-H//2
    return 1j*ch[:,None]+cw[None,:]


def xygrid(shape,res=1,z=False,scale=(1.0,1.0),):
    '''
    Generate a ``W×H`` (x,y) grid with upsampling 
    ``res``. 
    
    The coordinates returned are the *centers* of square 
    basis elements at each grid point, on a grid with 
    total area ``(W+1)×(H+1)``.
    
    Parameters
    ----------
    W: int
        Width of W×H grid for binned data.
    H: int
        Height of W×H grid for binned data.
    res: int; default 1
        Upsampling factor
    z: boolean; default Fals
        If true, will encode (x,y) as z=x+iy
    scale: tuple; default (1.0,1.0)
        Distance rescaling for ``(x,y)`` coordinates.
    
    Returns
    -------
    grdp: H×W×2 np.ndarray
        A ``H×W×2`` array of (x,y) point coordinates,
        or ``H×W`` array of z = x + iy if ``z=True``.
    '''
    # Generate discrete grid at desired resolution
    H,W = shape
    Wr  = W*res
    Hr  = H*res
    dx,dy = scale
    gx  = np.linspace(0,1,Wr+1+Wr)[1::2]*dx
    gy  = np.linspace(0,1,Hr+1+Hr)[1::2]*dy
    g   = np.array([
        gx[None,:]*np.ones((Hr,Wr)),
        gy[:,None]*np.ones((Hr,Wr))]) #2HW
    if z:
        return p2c(g) #HW
    return g.transpose(1,2,0) # HW2


def rgrid(shape,ftstyle=True):
    '''
    Grid containing the radius (in bins) from the center 
    of a N-D grid.
    
    Args:
        shape (tuple): Shape of N-D grid. 
        ftstyle (int; default True): If ``True``, the 
            midpoint of the resulting grid will be at 
            ``r=0``. If ``False``, the resulting grid will
            be symmetric under reflections
    '''
    D  = len(shape)
    r2 = np.zeros(shape)
    for d,L in enumerate(shape):
        m = L//2 if ftstyle else 0.5*L
        r2 += ((arange(L)-m)**2)[outerslice(D,d)]
    return r2**0.5


def outergrid(*grids):
    grids  = [*map(np.array,grids)]
    shapes = int32([g.shape for g in grids])
    nshape = tuple(concatenate(shapes))
    D      = len(grids)
    Q      = len(nshape)
    print(shapes,nshape,D)
    result = zeros((D,)+nshape)
    print(shape(result))
    i = 0
    for d,g in enumerate(grids):
        n = len(g.shape)
        s = sliceat(D,arange(n)+i,np.s_[:],None)
        print(shape(result),shape([s]))
        result[d,...] = g[s]
        i += n
    return result
"""
