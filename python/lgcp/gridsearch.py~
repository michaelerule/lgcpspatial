#!/usr/bin/python
# -*- coding: UTF-8 -*-
"""
from numpy import *
from matplotlib import *
from matplotlib.pyplot import *
"""

import numpy as np
from pylab import *

from typing import NamedTuple
class GridsearchResult(NamedTuple):
    '''best index into parameter grid''' 
    best: np.ndarray
    '''values of best parameters'''
    pars: np.ndarray
    '''
    (state, likelihood, info) at best parameters.
    ``info`` is determined by the third element in the
    3-tuple return-value of the ``evaluate`` function,
    passed by the user. ``state`` is also user-defined.
    '''
    bestresult: tuple 
    '''
    All other results as an object array.
    Grid points that were not evaluated are None.
    '''
    allresults: np.ndarray
    '''Parameter grid that has been searched'''
    pargrid: np.ndarray

def grid_search(
    pargrid,
    evaluate,
    verbose=True,
    **opts
    ):
    '''
    Grid search hyperparameter optimization    
    
    Parameters
    ----------
    pargrid: list of arrays
        A list; Each element is a list of values for a given 
        parameter to search over
    
    evaluate: function
        Arguments:
            Parameters: Tuple
                Parameters taken from the parameter search 
                grid
            State: List of arrays
                Saves initial conditions 
                (optional, default None)
        Returns:
            state: 
                the inferred model fit, in the form of a 
                list of floating-point numpy arrays, to be 
                re-used as initial conditions for 
                subsequent parameters.
            likelihood: float
                Scalar summary of fit quality, higher is better
            info: object
                Anything else you'd like to save
    
    Other Parameters
    ----------------
    verbose: boolean, default True
        Whether to print progress update
    
    Returns
    -------
    best: 
        best index into parameter grid
    pars: 
        values of best parameters
    results[best]: 
        (state, likelihood, info) at best parameters.
        ``info`` is determined by the third element in the
        3-tuple return-value of the ``evaluate`` function,
        passed by the user. ``state`` is also user-defined.
    allresults: 
        All other results as an object array.
        Grid points that were not evaluated are None.
    '''
    
    # - Get shape of search grid
    # - Prepare an object array to save search results
    # - Start the search in the middle of this grid
    # - Get the initial parameters 
    # - Evalute the performance at these parameters    
    gridshape = [*map(len,pargrid)]
    NPARAMS   = len(gridshape)
    results   = np.full(gridshape,None,dtype='object')
    pari      = [l//2 for l in gridshape]
    pars      = [pr[i] for pr,i in zip(pargrid,pari)]
    result0   = evaluate(pars,None)
    state0, likelihood0, info0 = result0

    # Tell me which parameters were the best, so far
    def current_best():
        nonlocal results
        ll = array([-inf if r is None else r[1] for r in results.ravel()])
        return unravel_index(argmax(ll),results.shape), np.max(ll)

    # Bounds test for grid search
    ingrid = lambda ix:all([i>=0 and i<Ni for i,Ni in zip(ix,gridshape)])
    
    # Recursive grid search function
    def search(index,suggested_direction=None):
        nonlocal results
        index = tuple(index)
        # Do nothing if we're outside the grid or already evaluated this index
        if not ingrid(index) or results[index] is not None: return
        initial = [*map(array,state0)]
        
        # Compute result and save
        pars            = [pr[i] for pr,i in zip(pargrid,index)]
        results[index]  = evaluate(pars,None,**opts)
        state, ll, info = results[index]
        if verbose:
            print('\r[%s](%s) loss=%e'%\
                (','.join(['%d'%i for i in index]),
                 ','.join(['%0.2e'%p for p in pars]),ll),
                  flush=True,end='')
        # Figure out where to go next
        # - Try continuing in current direction first
        # - Recurse along all other directions until better parameters found
        Δs = set()
        for i in range(NPARAMS):
            for d in [-1,1]:
                Δ = zeros(NPARAMS,'int32')
                Δ[i] += d
                Δs.add(tuple(Δ))
        if not suggested_direction is None:
            Δ = suggested_direction
            if current_best()[0]==index:
                search(int32(index)+Δ,Δ)
                Δs -= {tuple(Δ)}
        for Δ in Δs:
            if current_best()[0]!=index: break
            search(int32(index)+Δ,Δ)
        return
            
    search(pari)
    best = current_best()[0]
    pars = [pr[i] for pr,i in zip(pargrid,best)]
    if verbose:
        print('(done)')
    return GridsearchResult(best,pars,results[best],results,pargrid)


from .util import parmap
from .infer import lgcp2d
from .kern import kernelft
def optimize_PVtheta(N,K,prior_mean,P,V,
    rp = 2 , # Range (ratio) to search for optimal period
    rv = 10, # Range (ratio) to search for optimal kernel height
    Np = 51, # Period search grid resolution
    Nv = 51, # Kernel height search grid resolutions
    Nθ = 60, # Angles to test
    ):
    # Prepare hyperparameter grid
    Ps = float32(exp(linspace(log(P/rp),log(P*rp),Np)))
    Vs = float32(exp(linspace(log(V/rv),log(V*rv),Nv))[::-1])
    θs = linspace(0,pi/3,Nθ+1)[:Nθ]
    # Period and variance
    NKμ = (N,K,prior_mean)
    def gcloss(pars, state):
        P,V = pars
        kf = kernelft(N.shape,P=P,V=V)
        return lgcp2d(kf,*NKμ,initial_guess=state)[0]
    (P,V),(zv,nll,(r,zm,vm,mu)) = grid_search([Ps,Vs],gcloss)[1:3]
    results = []
    # Angle
    def angle_helper(θi):
        kernel = kernelft(N.shape,P=P,V=V,style='grid',gridangle=θi)
        return lgcp2d(kernel,*NKμ)[0]
    results = parmap(angle_helper,θs)
    allzv, nll, λv = zip(*results)
    i = argmax(nll)
    θ = θs[i]
    print('Optimized parameters:')
    print('P = %f'%P)
    print('V = %f'%V)
    print('θ = %f°'%(θ*180/pi))
    return (P, V, θ), results[i]


